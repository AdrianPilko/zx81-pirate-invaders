0001   0000             ; Copyright (c) 2024 Adrian Pilkington
0002   0000             
0003   0000             ; Permission is hereby granted, free of charge, to any person obtaining a copy
0004   0000             ; of this software and associated documentation files (the "Software"), to deal
0005   0000             ; in the Software without restriction, including without limitation the rights
0006   0000             ; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
0007   0000             ; copies of the Software, and to permit persons to whom the Software is
0008   0000             ; furnished to do so, subject to the following conditions:
0009   0000             
0010   0000             ; The above copyright notice and this permission notice shall be included in all
0011   0000             ; copies or substantial portions of the Software.
0012   0000             
0013   0000             ; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
0014   0000             ; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
0015   0000             ; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
0016   0000             ; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
0017   0000             ; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
0018   0000             ; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
0019   0000             ; SOFTWARE.
0020   0000             
0021   0000             ;;; Classic shootem up game "pirate invaders"
0022   0000             ;;;
0023   0000             ;;; https://youtube.com/@byteforever7829
0024   0000             
0025   0000             ;;; Known bug(s)
0026   0000             ;;;
0027   0000             
0028   0000             
0029   0000             ;some #defines for compatibility with other assemblers
0030   0000             #define         DEFB .byte 
0031   0000             #define         DEFW .word
0032   0000             #define         EQU  .equ
0033   0000             #define         ORG  .org
0034   0000             CLS				EQU $0A2A
0035   0000             
0036   0000             ;#define DEBUG_PRINT_PIRATE_CYCLE
0037   0000             ;#define DEBUG_PIRATE_DIR
0038   0000             
0039   0000             #define KEYBOARD_READ_PORT_P_TO_Y	$DF
0040   0000             ; for start key 
0041   0000             #define KEYBOARD_READ_PORT_A_TO_G	$FD
0042   0000             ; keyboard port for shift key to v
0043   0000             #define KEYBOARD_READ_PORT_SHIFT_TO_V $FE
0044   0000             ; keyboard space to b
0045   0000             #define KEYBOARD_READ_PORT_SPACE_TO_B $7F 
0046   0000             ; keyboard q to t
0047   0000             #define KEYBOARD_READ_PORT_Q_TO_T $FB
0048   0000             
0049   0000             ; starting port numbner for keyboard, is same as first port for shift to v
0050   0000             #define KEYBOARD_READ_PORT $FE 
0051   0000             #define SCREEN_WIDTH 32
0052   0000             #define SCREEN_HEIGHT 23   ; we can use the full screen becuase we're not using PRINT or PRINT AT ROM subroutines
0053   0000             #define MISSILE_COUNTDOWN_INIT 18
0054   0000             ;#define PLAYER_START_POS 604
0055   0000             #define PLAYER_START_POS 637
0056   0000             
0057   0000             
0058   0000             VSYNCLOOP       EQU      2
0059   0000             
0060   0000             ; character set definition/helpers
0061   0000             __:				EQU	$00	;spacja
0062   0000             _QT:			EQU	$0B	;"
0063   0000             _PD:			EQU	$0C	;funt 
0064   0000             _SD:			EQU	$0D	;$
0065   0000             _CL:			EQU	$0E	;:
0066   0000             _QM:			EQU	$0F	;?
0067   0000             _OP:			EQU	$10	;(
0068   0000             _CP:			EQU	$11	;)
0069   0000             _GT:			EQU	$12	;>
0070   0000             _LT:			EQU	$13	;<
0071   0000             _EQ:			EQU	$14	;=
0072   0000             _PL:			EQU	$15	;+
0073   0000             _MI:			EQU	$16	;-
0074   0000             _AS:			EQU	$17	;*
0075   0000             _SL:			EQU	$18	;/
0076   0000             _SC:			EQU	$19	;;
0077   0000             _CM:			EQU	$1A	;,
0078   0000             _DT:			EQU	$1B	;.
0079   0000             _NL:			EQU	$76	;NEWLINE
0080   0000             
0081   0000             _BL             EQU $80; solid block
0082   0000             
0083   0000             _0				EQU $1C
0084   0000             _1				EQU $1D
0085   0000             _2				EQU $1E
0086   0000             _3				EQU $1F
0087   0000             _4				EQU $20
0088   0000             _5				EQU $21
0089   0000             _6				EQU $22
0090   0000             _7				EQU $23
0091   0000             _8				EQU $24
0092   0000             _9				EQU $25
0093   0000             _A				EQU $26
0094   0000             _B				EQU $27
0095   0000             _C				EQU $28
0096   0000             _D				EQU $29
0097   0000             _E				EQU $2A
0098   0000             _F				EQU $2B
0099   0000             _G				EQU $2C
0100   0000             _H				EQU $2D
0101   0000             _I				EQU $2E
0102   0000             _J				EQU $2F
0103   0000             _K				EQU $30
0104   0000             _L				EQU $31
0105   0000             _M				EQU $32
0106   0000             _N				EQU $33
0107   0000             _O				EQU $34
0108   0000             _P				EQU $35
0109   0000             _Q				EQU $36
0110   0000             _R				EQU $37
0111   0000             _S				EQU $38
0112   0000             _T				EQU $39
0113   0000             _U				EQU $3A
0114   0000             _V				EQU $3B
0115   0000             _W				EQU $3C
0116   0000             _X				EQU $3D
0117   0000             _Y				EQU $3E
0118   0000             _Z				EQU $3F
0119   0000             
0120   0000             
0121   0000             ;;;; this is the whole ZX81 runtime system and gets assembled and 
0122   0000             ;;;; loads as it would if we just powered/booted into basic
0123   0000             
0124   4009                        ORG  $4009             ; assemble to this address
0125   4009                                                                             
0126   4009 00          VERSN:          DEFB 0
0127   400A 02 00       E_PPC:          DEFW 2
0128   400C 6A 44       D_FILE:         DEFW Display
0129   400E 6B 44       DF_CC:          DEFW Display+1                  ; First character of display
0130   4010 83 47       VARS:           DEFW Variables
0131   4012 00 00       DEST:           DEFW 0
0132   4014 FA 4A       E_LINE:         DEFW BasicEnd 
0133   4016 FE 4A       CH_ADD:         DEFW BasicEnd+4                 ; Simulate SAVE "X"
0134   4018 00 00       X_PTR:          DEFW 0
0135   401A FF 4A       STKBOT:         DEFW BasicEnd+5
0136   401C FF 4A       STKEND:         DEFW BasicEnd+5                 ; Empty stack
0137   401E 00          BREG:           DEFB 0
0138   401F 3C 40       MEM:            DEFW MEMBOT
0139   4021 00          UNUSED1:        DEFB 0
0140   4022 02          DF_SZ:          DEFB 2
0141   4023 02 00       S_TOP:          DEFW $0002                      ; Top program line number
0142   4025 BF FD       LAST_K:         DEFW $fdbf
0143   4027 0F          DEBOUN:         DEFB 15
0144   4028 37          MARGIN:         DEFB 55
0145   4029 58 44       NXTLIN:         DEFW Line2                      ; Next line address
0146   402B 00 00       OLDPPC:         DEFW 0
0147   402D 00          FLAGX:          DEFB 0
0148   402E 00 00       STRLEN:         DEFW 0
0149   4030 8D 0C       T_ADDR:         DEFW $0c8d
0150   4032 00 00       SEED:           DEFW 0
0151   4034 A3 F5       FRAMES:         DEFW $f5a3
0152   4036 00 00       COORDS:         DEFW 0
0153   4038 BC          PR_CC:          DEFB $bc
0154   4039 21 18       S_POSN:         DEFW $1821
0155   403B 40          CDFLAG:         DEFB $40
0156   403C 00 00       MEMBOT:         DEFB 0,0 ;  zeros
0157   403E 00 00       UNUNSED2:       DEFW 0
0158   4040             
0159   407D                         ORG 16509       ;; we have to push the place in memory for this here becuase basic has 
0160   407D                                 ;; to start at 16514 if memory was tight we could use the space between UNUSED2
0161   407D                                 ;; and Line1 for variables
0162   407D             
0163   407D 00 0A       Line1:          DEFB $00,$0a                    ; Line 10
0164   407F D7 03                       DEFW Line1End-Line1Text         ; Line 10 length
0165   4081 EA          Line1Text:      DEFB $ea                        ; REM
0166   4082             
0167   4082             
0168   4082             
0169   4082             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0170   4082 C3 85 40    	jp intro_title		; main entry poitn to the code ships the memory definitions
0171   4085             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0172   4085             	
0173   4085             intro_title
0174   4085 CD 2A 0A    	call CLS  ; clears screen and sets the boarder
0175   4088               
0176   4088             preinit
0177   4088             ;; initialise variables that are once per game load/start
0178   4088             
0179   4088             initVariables
0180   4088             
0181   4088                 ; draw top line where lives and score go
0182   4088 11 0E 4A        ld de, TopLineText
0183   408B 01 02 00        ld bc, 2
0184   408E CD 02 44        call printstring
0185   4091             
0186   4091 AF              xor a
0187   4092 3A BF 49        ld a, (MissileInFlightFlag)
0188   4095 32 9D 49        ld (evenOddLoopFlag), a    ; used for multi rate enemies and other things   
0189   4098                 
0190   4098 3A C0 49        ld a, (missileCountDown)
0191   409B 3E 09           ld a, 9
0192   409D 32 9C 49        ld (playerXPos), a
0193   40A0 21 83 47        ld hl, playerSpriteData
0194   40A3 22 ED 49        ld (playerSpritePointer), hl 
0195   40A6 21 6B 44        ld hl, Display+1 
0196   40A9 11 7D 02        ld de, PLAYER_START_POS
0197   40AC 19              add hl, de 
0198   40AD 22 BD 49        ld (currentPlayerLocation), hl
0199   40B0 21 6B 44        ld hl, Display+1 
0200   40B3 11 06 00        ld de, 6
0201   40B6 19              add hl, de     
0202   40B7 22 02 4A        ld (jollyRogerLocation), hl
0203   40BA 21 01 00        ld hl, 1
0204   40BD 22 FF 49        ld (jollyRogerDirUpdate),hl
0205   40C0 3E 05           ld a, 5
0206   40C2 32 01 4A        ld (jollyRogerXPos),a
0207   40C5                 
0208   40C5 21 01 00        ld hl, 1
0209   40C8 22 F7 49        ld (pirateDirUpdate),hl
0210   40CB 3E 05           ld a, 5
0211   40CD 32 F9 49        ld (pirateXPos),a
0212   40D0                 
0213   40D0 3E 03           ld a, 3 
0214   40D2 32 FA 49        ld (playerLives), a
0215   40D5                 
0216   40D5 AF              xor a
0217   40D6 32 06 4A        ld (gameOverRestartFlag), a        
0218   40D9 3A FB 49        ld a, (score_mem_tens)
0219   40DC 32 FD 49        ld (last_score_mem_tens),a
0220   40DF 3A FC 49        ld a, (score_mem_hund)
0221   40E2 32 FE 49        ld (last_score_mem_hund),a        
0222   40E5                 
0223   40E5                 
0224   40E5             
0225   40E5 21 6B 44        ld hl, Display+1 
0226   40E8 11 24 00        ld de, 36
0227   40EB 19              add hl, de 
0228   40EC 22 EF 49        ld (pirateTopLeftPosition), hl
0229   40EF AF              xor a
0230   40F0 32 F4 49        ld (pirateSpriteCycleCount), a
0231   40F3                 ;ld hl, pirate3sprites
0232   40F3 21 C3 48        ld hl, pirate3sprites4x4
0233   40F6 22 F5 49        ld (pirateSpritesPointer), hl 
0234   40F9 21 01 00        ld hl, 1 
0235   40FC 22 F7 49        ld (pirateDirUpdate), hl
0236   40FF 3E FF           ld a, $ff   ; every pirate is alive
0237   4101                 ;ld a, $01   ; for test only bottom right pirate is alive
0238   4101                 ;ld a, $80   ; for test only top left pirate is alive    
0239   4101 3E 55           ld a, $55   ; for test every other pirate is alive
0240   4103 32 9B 49        ld (pirateValidBitMap), a
0241   4106                 
0242   4106             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;    
0243   4106             gameLoop    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0244   4106             
0245   4106 06 02       	ld b,VSYNCLOOP
0246   4108             waitForTVSync	
0247   4108 CD 4C 44    	call vsync
0248   410B 10 FB       	djnz waitForTVSync
0249   410D             
0250   410D 3A 9E 49        ld a, (evenOddLoopCount)
0251   4110 3C              inc a
0252   4111 FE 08           cp 8    
0253   4113 28 09           jr z, resetEvenOddAndSetFlag
0254   4115 32 9E 49        ld (evenOddLoopCount), a
0255   4118 AF              xor a
0256   4119 32 9D 49        ld (evenOddLoopFlag), a    ; used for multi rate enemies    
0257   411C 18 09           jr continueWithGameLoop
0258   411E                 
0259   411E             resetEvenOddAndSetFlag    
0260   411E AF              xor a
0261   411F 32 9E 49        ld (evenOddLoopCount), a
0262   4122 3E 01           ld a, 1
0263   4124 32 9D 49        ld (evenOddLoopFlag), a    ; used for multi rate enemies
0264   4127             
0265   4127             continueWithGameLoop              
0266   4127 CD 11 43        call drawMainInvaderGrid
0267   412A                 
0268   412A                 
0269   412A ED 5B BD 49     ld de, (currentPlayerLocation)
0270   412E 21 F3 48        ld hl, blankSprite
0271   4131 0E 08           ld c, 8
0272   4133 06 04           ld b, 4 
0273   4135 CD A1 43        call drawSprite
0274   4138                 
0275   4138                 ; ld hl, blankSprite
0276   4138                 ; ld de, (previousJollyRogerLocation)
0277   4138                 ; ld c, 8
0278   4138                 ; ld b, 8    
0279   4138                 ; call drawSprite    
0280   4138                 ; call updateJollyRoger    
0281   4138                 
0282   4138                 
0283   4138             
0284   4138                 
0285   4138                     
0286   4138 CD C8 43        call printLivesAndScore   
0287   413B                 
0288   413B                     
0289   413B 3A 06 4A        ld a, (gameOverRestartFlag)
0290   413E FE 01           cp 1
0291   4140 CA 85 40        jp z, intro_title
0292   4143                 
0293   4143                 ;call blankEnemySprites
0294   4143                 ;call drawEnemySprites        
0295   4143                 ;call updateEnemySpritePositions
0296   4143                    
0297   4143                
0298   4143             ; keyboard layout for reading keys on ZX81
0299   4143             ; BIT   left block      right block  BIT
0300   4143             ; off                                off in <port>, when ld a, <port>
0301   4143             ;       0  1 2 3 4     4 3 2 1 0                 <<< bit to check for each column after in a, $fe 
0302   4143             ; 3   ( 1  2 3 4 5 ) ( 6 7 8 9 0 )     4
0303   4143             ; 2   ( Q  W E R T ) ( Y U I O P )     5
0304   4143             ; 1   ( A  S D F G ) ( H I K L n/l)    6
0305   4143             ; 0   (sft Z X C V ) ( B N M . spc)    7
0306   4143             ;
0307   4143             ; to read keys 1 2 3 4 5
0308   4143             ; set all bits except bit 3 of register A = 1 1 1 1 0 1 1 1= f7, then execute in a, $fe  (fe is the "keyboard read port")
0309   4143             ; now register a will contain a bit pattern to check for which key in that block was set, eg Key "1" = bit 0 of a
0310   4143             ; ld a, $f7    
0311   4143             ; in a, $fe    
0312   4143             ; similarly for the rest, to read from block A S D F G, set a to 1 1 1 1 1 1 1 0 1 = $fd
0313   4143             
0314   4143                 
0315   4143                 ;; read keys
0316   4143 3E DF           ld a, KEYBOARD_READ_PORT_P_TO_Y			
0317   4145 DB FE           in a, (KEYBOARD_READ_PORT)					; read from io port	
0318   4147 CB 4F           bit 1, a                            ; O
0319   4149 CA 6A 41        jp z, moveLeft
0320   414C             
0321   414C             
0322   414C 3E DF           ld a, KEYBOARD_READ_PORT_P_TO_Y			
0323   414E DB FE           in a, (KEYBOARD_READ_PORT)					; read from io port		
0324   4150 CB 47           bit 0, a					        ; P
0325   4152 CA 92 41        jp z, moveRight
0326   4155             
0327   4155             
0328   4155 3E 7F           ld a, KEYBOARD_READ_PORT_SPACE_TO_B			
0329   4157 DB FE           in a, (KEYBOARD_READ_PORT)					; read from io port		
0330   4159 CB 47           bit 0, a						    ; SPACE
0331   415B CA BA 41        jp z, doFireMissile
0332   415E                 
0333   415E 3E FE           ld a, KEYBOARD_READ_PORT_SHIFT_TO_V			
0334   4160 DB FE           in a, (KEYBOARD_READ_PORT)					; read from io port		
0335   4162 CB 4F           bit 1, a						    ; Z
0336   4164 CA BA 41        jp z, doFireMissile    
0337   4167             skipFireKeyDetect_1    
0338   4167 C3 D6 41        jp updateRestOfScreen                       ; if no key pressed continue
0339   416A             
0340   416A             moveLeft         
0341   416A 3A 9C 49        ld a, (playerXPos)
0342   416D 3D              dec a
0343   416E FE 00           cp 0      ;;; this prevents the player moving past edge, but if it's a door
0344   4170                           ;; trigger seperate code to move to new room
0345   4170 CA D6 41        jp z, updateRestOfScreen   
0346   4173 32 9C 49        ld (playerXPos), a
0347   4176                 
0348   4176                     
0349   4176 2A BD 49        ld hl, (currentPlayerLocation)
0350   4179 2B              dec hl
0351   417A 22 BD 49        ld (currentPlayerLocation), hl  
0352   417D             
0353   417D                  
0354   417D 3E 7F           ld a, KEYBOARD_READ_PORT_SPACE_TO_B			
0355   417F DB FE           in a, (KEYBOARD_READ_PORT)					; read from io port		
0356   4181 CB 47           bit 0, a						    ; SPACE
0357   4183 CA BA 41        jp z, doFireMissile
0358   4186                 
0359   4186 3E FE           ld a, KEYBOARD_READ_PORT_SHIFT_TO_V			
0360   4188 DB FE           in a, (KEYBOARD_READ_PORT)					; read from io port		
0361   418A CB 4F           bit 1, a						    ; Z
0362   418C CA BA 41        jp z, doFireMissile        
0363   418F C3 D6 41        jp updateRestOfScreen 
0364   4192                 
0365   4192             moveRight       
0366   4192 3A 9C 49        ld a, (playerXPos)
0367   4195 3C              inc a
0368   4196 FE 18           cp 24          ;;; this prevents the player moving past edge, but if it's a door
0369   4198                                ;; trigger seperate code to move to new room
0370   4198                 
0371   4198 CA D6 41        jp z, updateRestOfScreen   
0372   419B 32 9C 49        ld (playerXPos), a
0373   419E                 
0374   419E                 
0375   419E                 
0376   419E 2A BD 49        ld hl, (currentPlayerLocation)    
0377   41A1 23              inc hl
0378   41A2 22 BD 49        ld (currentPlayerLocation), hl     
0379   41A5               
0380   41A5 3E 7F           ld a, KEYBOARD_READ_PORT_SPACE_TO_B			
0381   41A7 DB FE           in a, (KEYBOARD_READ_PORT)					; read from io port		
0382   41A9 CB 47           bit 0, a						    ; SPACE
0383   41AB CA BA 41        jp z, doFireMissile
0384   41AE             
0385   41AE 3E FE           ld a, KEYBOARD_READ_PORT_SHIFT_TO_V			
0386   41B0 DB FE           in a, (KEYBOARD_READ_PORT)					; read from io port		
0387   41B2 CB 4F           bit 1, a						    ; Z
0388   41B4 CA BA 41        jp z, doFireMissile         
0389   41B7             
0390   41B7 C3 D6 41        jp updateRestOfScreen 
0391   41BA                 
0392   41BA             doFireMissile      ; triggered when jump key pressed just sets the       
0393   41BA 3A BF 49        ld a, (MissileInFlightFlag)
0394   41BD FE 01           cp 1
0395   41BF CA D6 41        jp z, skipLaunchMissile
0396   41C2                 ;; we first need to work out where the missiles should fire from based on current player location
0397   41C2                 ;; unless we're in power up mode then just fires form middle of nose of ship
0398   41C2                 
0399   41C2                 ;; in power up mode we'll fire from nose and wing tips :) (note: not yet implemented) 
0400   41C2 2A BD 49        ld hl, (currentPlayerLocation)
0401   41C5 11 E1 FF        ld de, -31  
0402   41C8 19              add hl, de    
0403   41C9 22 C1 49        ld (currentMissilePosition), hl
0404   41CC                 ;;; setup the missile "Time To Live"  (like ethernet TTL right :)
0405   41CC 3E 12           ld a, MISSILE_COUNTDOWN_INIT
0406   41CE 32 C0 49        ld (missileCountDown), a
0407   41D1 3E 01           ld a, 1
0408   41D3 32 BF 49        ld (MissileInFlightFlag), a
0409   41D6                       
0410   41D6             
0411   41D6             skipLaunchMissile
0412   41D6             updateRestOfScreen 
0413   41D6                 
0414   41D6 2A ED 49        ld hl, (playerSpritePointer)    
0415   41D9 ED 5B BD 49     ld de, (currentPlayerLocation)
0416   41DD 0E 08           ld c, 8
0417   41DF 06 04           ld b, 4    
0418   41E1 CD A1 43        call drawSprite
0419   41E4             
0420   41E4             ;; the idea is to use the skull and cross bones as an end of level "boss"
0421   41E4~            #if 0    
0422   41E4~                ld hl, jollyRoger
0423   41E4~                ld de, (jollyRogerLocation)
0424   41E4~                ld c, 8
0425   41E4~                ld b, 8    
0426   41E4~                call drawSprite    
0427   41E4~                call updateJollyRoger    
0428   41E4             #endif    
0429   41E4                 
0430   41E4 3A BF 49        ld a, (MissileInFlightFlag)
0431   41E7 FE 00           cp 0
0432   41E9 CA 0F 42        jp z, skipMissileDraw
0433   41EC                 
0434   41EC 2A C1 49        ld hl, (currentMissilePosition)
0435   41EF 11 21 00        ld de, 33
0436   41F2 19              add hl, de
0437   41F3 EB              ex de, hl    
0438   41F4 21 F3 48        ld hl, blankSprite
0439   41F7 0E 04           ld c, 4
0440   41F9 06 04           ld b, 4 
0441   41FB CD A1 43        call drawSprite    
0442   41FE                 
0443   41FE 21 C3 47        ld hl, missileData
0444   4201 ED 5B C1 49     ld de, (currentMissilePosition)        
0445   4205 0E 04           ld c, 4
0446   4207 06 04           ld b, 4    
0447   4209 CD A1 43        call drawSprite
0448   420C                    
0449   420C CD 12 42        call updateMissilePosition
0450   420F             skipMissileDraw
0451   420F                 
0452   420F C3 06 41        jp gameLoop
0453   4212                 
0454   4212             updateMissilePosition
0455   4212 3A C0 49          ld a, (missileCountDown)
0456   4215 3D                dec a
0457   4216 FE 00             cp 0
0458   4218 CA 2A 42          jp z, noMissileUpClearMissile
0459   421B                  
0460   421B 32 C0 49          ld (missileCountDown), a      
0461   421E                   
0462   421E 2A C1 49          ld hl, (currentMissilePosition)    
0463   4221 11 DF FF          ld de, -33
0464   4224 19                add hl, de
0465   4225 22 C1 49          ld (currentMissilePosition), hl
0466   4228 18 04             jr noMissileUpdate
0467   422A             noMissileUpClearMissile
0468   422A AF                xor a
0469   422B 32 BF 49          ld (MissileInFlightFlag), a 
0470   422E             noMissileUpdate      
0471   422E C9                ret
0472   422F                   
0473   422F             
0474   422F             updatePirateXPos   
0475   422F             
0476   422F 3A F9 49        ld a, (pirateXPos)            
0477   4232 FE 0E           cp 14
0478   4234 28 06           jr z, reversePirateDirToNeg
0479   4236 FE 03           cp 3
0480   4238 28 34           jr z, reversePirateDirToPos
0481   423A                     
0482   423A 18 64           jr endOfUpdatePirateXPos    
0483   423C                 
0484   423C             reversePirateDirToNeg
0485   423C 21 FF FF        ld hl, -1 
0486   423F 22 F7 49        ld (pirateDirUpdate), hl
0487   4242                 ;; also shove down one row
0488   4242                 ;before we do that we need to blank the line where the pirates "heads" were
0489   4242 ED 5B EF 49     ld de, (pirateTopLeftPosition)
0490   4246 21 F3 48        ld hl, blankSprite
0491   4249 0E 10           ld c, 16
0492   424B 06 01           ld b, 1 
0493   424D CD A1 43        call drawSprite
0494   4250 2A EF 49        ld hl, (pirateTopLeftPosition)
0495   4253 11 A5 00        ld de, 165
0496   4256 19              add hl, de
0497   4257 EB              ex de, hl
0498   4258 21 F3 48        ld hl, blankSprite
0499   425B 0E 10           ld c, 16
0500   425D 06 01           ld b, 1 
0501   425F CD A1 43        call drawSprite
0502   4262                 ;; finally move one row down
0503   4262 2A EF 49        ld hl, (pirateTopLeftPosition)
0504   4265 11 21 00        ld de, 33
0505   4268 19              add hl, de
0506   4269 22 EF 49        ld (pirateTopLeftPosition),hl   
0507   426C                 
0508   426C 18 32           jr endOfUpdatePirateXPos 
0509   426E                 
0510   426E             reversePirateDirToPos    
0511   426E 21 01 00        ld hl, 1 
0512   4271 22 F7 49        ld (pirateDirUpdate), hl
0513   4274                 ;; also shove down one row
0514   4274                 ;before we do that we need to blank the line where the pirates "heads" were
0515   4274 ED 5B EF 49     ld de, (pirateTopLeftPosition)
0516   4278 21 F3 48        ld hl, blankSprite
0517   427B 0E 10           ld c, 16
0518   427D 06 01           ld b, 1 
0519   427F CD A1 43        call drawSprite
0520   4282                 ;; and blank the middle bit between the rows of pirates
0521   4282 2A EF 49        ld hl, (pirateTopLeftPosition)
0522   4285 11 A5 00        ld de, 165
0523   4288 19              add hl, de
0524   4289 EB              ex de, hl
0525   428A 21 F3 48        ld hl, blankSprite
0526   428D 0E 10           ld c, 16
0527   428F 06 01           ld b, 1 
0528   4291 CD A1 43        call drawSprite
0529   4294                 
0530   4294                 ;; finally move one row down
0531   4294 2A EF 49        ld hl, (pirateTopLeftPosition)
0532   4297 11 21 00        ld de, 33
0533   429A 19              add hl, de
0534   429B 22 EF 49        ld (pirateTopLeftPosition),hl    
0535   429E 18 00           jr endOfUpdatePirateXPos 
0536   42A0                 
0537   42A0             endOfUpdatePirateXPos
0538   42A0~            #ifdef DEBUG_PIRATE_DIR
0539   42A0~                ld a,(pirateXPos)  
0540   42A0~                ld de, 1
0541   42A0~                call print_number8bits
0542   42A0             #endif   
0543   42A0 2A EF 49        ld hl, (pirateTopLeftPosition)
0544   42A3                 ;ld (previousPirateLocation), hl
0545   42A3 ED 5B F7 49     ld de, (pirateDirUpdate)
0546   42A7 19              add hl, de
0547   42A8 22 EF 49        ld (pirateTopLeftPosition), hl
0548   42AB             
0549   42AB 2A F7 49        ld hl, (pirateDirUpdate)    
0550   42AE 3A F9 49        ld a, (pirateXPos)
0551   42B1 85              add a, l
0552   42B2 32 F9 49        ld (pirateXPos), a 
0553   42B5                 
0554   42B5 C9              ret
0555   42B6                   
0556   42B6             updateJollyRoger   
0557   42B6 3A 01 4A        ld a, (jollyRogerXPos)        
0558   42B9 FE 17           cp 23  
0559   42BB 28 06           jr z, reverseDirToNeg
0560   42BD FE 01           cp 1
0561   42BF 28 0A           jr z, reverseDirToPos
0562   42C1                     
0563   42C1 18 10           jr endOfUpdateJollyRoger    
0564   42C3                 
0565   42C3             reverseDirToNeg
0566   42C3 21 FF FF        ld hl, -1 
0567   42C6 22 FF 49        ld (jollyRogerDirUpdate), hl
0568   42C9 18 08           jr endOfUpdateJollyRoger 
0569   42CB                 
0570   42CB             reverseDirToPos    
0571   42CB 21 01 00        ld hl, 1 
0572   42CE 22 FF 49        ld (jollyRogerDirUpdate), hl
0573   42D1 18 00           jr endOfUpdateJollyRoger 
0574   42D3                 
0575   42D3             endOfUpdateJollyRoger    
0576   42D3                 
0577   42D3 2A 02 4A        ld hl, (jollyRogerLocation)
0578   42D6 22 04 4A        ld (previousJollyRogerLocation), hl
0579   42D9 ED 5B FF 49     ld de, (jollyRogerDirUpdate)
0580   42DD 19              add hl, de
0581   42DE 22 02 4A        ld (jollyRogerLocation), hl
0582   42E1             
0583   42E1 2A FF 49        ld hl, (jollyRogerDirUpdate)    
0584   42E4 3A 01 4A        ld a, (jollyRogerXPos)
0585   42E7 85              add a, l
0586   42E8 32 01 4A        ld (jollyRogerXPos), a 
0587   42EB                 
0588   42EB C9              ret
0589   42EC             
0590   42EC             blankToLAndROfInvader
0591   42EC 2A EF 49        ld hl, (pirateTopLeftPosition)    
0592   42EF 11 FF FF        ld de, -1
0593   42F2 19              add hl, de
0594   42F3 EB              ex de, hl
0595   42F4 21 C3 49        ld hl, enemySprite5by8Blank
0596   42F7 0E 01           ld c, 1
0597   42F9 06 09           ld b, 9 
0598   42FB CD A1 43        call drawSprite              
0599   42FE 2A EF 49        ld hl, (pirateTopLeftPosition)    
0600   4301 11 10 00        ld de, 16
0601   4304 19              add hl, de
0602   4305 EB              ex de, hl
0603   4306 21 C3 49        ld hl, enemySprite5by8Blank
0604   4309 0E 01           ld c, 1
0605   430B 06 09           ld b, 9 
0606   430D CD A1 43        call drawSprite                  
0607   4310 C9             ret
0608   4311                
0609   4311             drawMainInvaderGrid
0610   4311             ;; we have an area of memory which will represent flags for if each of the grid of 5 rows of
0611   4311             ;; 5 columnsn invaders is valid (ie not been killed). This code will loop round that and 
0612   4311             ;; display an invader sprite if required       
0613   4311 CD EC 42        call blankToLAndROfInvader
0614   4314 06 02           ld b, 2
0615   4316 2A EF 49        ld hl, (pirateTopLeftPosition)
0616   4319 22 F1 49        ld (pirateRowLeftPositionTemp), hl
0617   431C 3E 80           ld a, $80    ; setup a moving bit mask which we'll use to determine if the pirate is shot or not
0618   431E 32 F3 49        ld (pirateValidBitMapMaskTemp), a
0619   4321                 
0620   4321                 
0621   4321             pirateRowDrawLoop    
0622   4321             
0623   4321 C5             push bc
0624   4322                     
0625   4322 06 04               ld b, 4       
0626   4324             pirateColDrawLoop 
0627   4324 C5                      push bc 
0628   4325                             ;; put some logic here to determine if the pirate was shot or not
0629   4325                             
0630   4325 3A F3 49                    ld a, (pirateValidBitMapMaskTemp)
0631   4328 47                          ld b, a
0632   4329 3A 9B 49                    ld a, (pirateValidBitMap)
0633   432C A0                          and b                
0634   432D F5                          push af
0635   432E CB 18                       rr b
0636   4330 78                          ld a, b
0637   4331 32 F3 49                    ld (pirateValidBitMapMaskTemp),a
0638   4334 F1                          pop af
0639   4335 28 10                       jr z, skipDrawThisPirate    
0640   4337                             
0641   4337                             
0642   4337 ED 5B F1 49                 ld de, (pirateRowLeftPositionTemp)
0643   433B 2A F5 49                    ld hl, (pirateSpritesPointer)
0644   433E 0E 04                       ld c, 4
0645   4340                             ;ld b, 8 
0646   4340 06 04                       ld b, 4 
0647   4342 CD A1 43                    call drawSprite          
0648   4345 18 0E                       jr continueWithPirateLoop
0649   4347             skipDrawThisPirate
0650   4347                             ;; but draw a blank
0651   4347 ED 5B F1 49                 ld de, (pirateRowLeftPositionTemp)
0652   434B 21 F3 48                    ld hl, blankSprite
0653   434E 0E 04                       ld c, 4
0654   4350                             ;ld b, 8 
0655   4350 06 04                       ld b, 4 
0656   4352 CD A1 43                    call drawSprite                          
0657   4355             continueWithPirateLoop                
0658   4355 21 04 00                    ld hl, 4
0659   4358 ED 5B F1 49                 ld de, (pirateRowLeftPositionTemp)
0660   435C 19                          add hl, de   
0661   435D 22 F1 49                    ld (pirateRowLeftPositionTemp), hl
0662   4360 C1                      pop bc
0663   4361 10 C1                   djnz pirateColDrawLoop        
0664   4363                         
0665   4363 2A EF 49                ld hl, (pirateTopLeftPosition)    
0666   4366 11 A5 00                ld de, 165
0667   4369 19                      add hl, de
0668   436A 22 F1 49                ld (pirateRowLeftPositionTemp), hl
0669   436D             
0670   436D C1             pop bc    
0671   436E 10 B1          djnz pirateRowDrawLoop
0672   4370                  
0673   4370 3A 9D 49       ld a, (evenOddLoopFlag)
0674   4373 FE 01          cp 1
0675   4375 28 02          jr z, updatePirateSpriteCycle
0676   4377 18 27          jr endOfPirateSpriteUpdate
0677   4379                ; update the sprite to draw from the 3 cycles 
0678   4379             updatePirateSpriteCycle   
0679   4379                ; update X position and reverse direction if reached end limits
0680   4379 CD 2F 42       call updatePirateXPos
0681   437C                
0682   437C 3A F4 49       ld a, (pirateSpriteCycleCount)
0683   437F 3C             inc a
0684   4380 FE 02          cp 2
0685   4382 28 12          jr z, resetPirateSprite
0686   4384 32 F4 49       ld (pirateSpriteCycleCount), a
0687   4387 2A F5 49       ld hl, (pirateSpritesPointer)
0688   438A 11 20 00       ld de, 32
0689   438D 19             add hl, de
0690   438E 22 F5 49       ld (pirateSpritesPointer), hl
0691   4391 3A F4 49       ld a, (pirateSpriteCycleCount)     ;; currentPlayerLocation is already offset to
0692   4394~            #ifdef DEBUG_PRINT_PIRATE_CYCLE   
0693   4394~               ld de, 1
0694   4394~               call print_number8bits
0695   4394             #endif   
0696   4394 18 0A          jr endOfPirateSpriteUpdate
0697   4396                
0698   4396             resetPirateSprite   
0699   4396 AF             xor a
0700   4397 32 F4 49       ld (pirateSpriteCycleCount), a
0701   439A                ;ld hl, pirate3sprites
0702   439A 21 C3 48       ld hl, pirate3sprites4x4
0703   439D 22 F5 49       ld (pirateSpritesPointer), hl 
0704   43A0             
0705   43A0             endOfPirateSpriteUpdate 
0706   43A0 C9             ret   
0707   43A1                 
0708   43A1             
0709   43A1             ;;;; sprite code
0710   43A1             ;;;; our sprites are custom 8 by 8 charactor blocks - so will look fairly big (maybe too big)
0711   43A1             ;;;; the generic routines will look at an area of memory stored in hl before the call
0712   43A1             
0713   43A1             ;;;; on the zx81 each block is 2 "pixels" horizontally and 2 vertically pre encoded in the sprite memory
0714   43A1             ;;;; size of sprite in memory using bit pack is 16 * 16 = 256bits ==>>> 32bytes
0715   43A1             
0716   43A1             
0717   43A1             ;;; hl = start of sprite memory
0718   43A1             ;;; de = offset position in screen memory top left of sprite - no limit check done (yet)
0719   43A1             ;;; c  = width of sprite (normally 8 to keep things "simple")
0720   43A1             ;;; b  = rows in sprite (normally 8 to keep things "simple")
0721   43A1             drawSprite         
0722   43A1 C5              push bc    
0723   43A2 D5              push de
0724   43A3 06 00           ld b, 0               ;; just doing columns in c so zero b
0725   43A5 ED B0           ldir                  ;; ldir repeats ld (de), (hl) until bc = 0 and increments hl and de
0726   43A7 D1              pop de
0727   43A8 EB              ex de, hl    
0728   43A9 01 21 00        ld bc, 33             ;; move next write position to next row
0729   43AC 09              add hl, bc
0730   43AD EB              ex de, hl
0731   43AE C1              pop bc
0732   43AF 10 F0           djnz drawSprite    
0733   43B1 C9              ret
0734   43B2             
0735   43B2             
0736   43B2             ;;; work in progrerss currently crashes - 
0737   43B2             ;; if this could be made to work then the platforms would appear in blank bits of sprite
0738   43B2             ;; which would made game play better
0739   43B2             drawSprite_OR_BACKGROUND         
0740   43B2 C5              push bc    
0741   43B3 D5              push de
0742   43B4                 
0743   43B4 41              ld b, c    ; get column loop counter in b 
0744   43B5             drawSprite_OR_ColLoop
0745   43B5 7E              ld a, (hl)
0746   43B6 23              inc hl
0747   43B7 B2              or d
0748   43B8 B3              or e
0749   43B9 12              ld (de), a
0750   43BA 13              inc de
0751   43BB 10 F8           djnz drawSprite_OR_ColLoop
0752   43BD             
0753   43BD D1              pop de
0754   43BE EB              ex de, hl    
0755   43BF 01 21 00        ld bc, 33             ;; move next write position to next row
0756   43C2 09              add hl, bc
0757   43C3 EB              ex de, hl
0758   43C4 C1              pop bc
0759   43C5 10 EB           djnz drawSprite_OR_BACKGROUND    
0760   43C7 C9              ret  
0761   43C8                 
0762   43C8             printLivesAndScore
0763   43C8 3A FA 49        ld a, (playerLives)
0764   43CB 11 1D 00        ld de, 29    
0765   43CE CD 1F 44        call print_number8bits        
0766   43D1                 
0767   43D1 01 0C 00        ld bc, 12
0768   43D4 11 FB 49        ld de, score_mem_tens
0769   43D7 CD 35 44        call printNumber
0770   43DA 01 0A 00        ld bc, 10
0771   43DD 11 FC 49        ld de, score_mem_hund
0772   43E0 CD 35 44        call printNumber     
0773   43E3 C9              ret
0774   43E4             
0775   43E4             increaseScore    
0776   43E4 3A FB 49        ld a,(score_mem_tens)				; add one to score, scoring is binary coded decimal (BCD)
0777   43E7 C6 01       	add a,1	
0778   43E9 27          	daa									; z80 daa instruction realigns for BCD after add or subtract
0779   43EA 32 FB 49    	ld (score_mem_tens),a	
0780   43ED FE 99       	cp 153
0781   43EF 28 02       	jr z, addOneToHund
0782   43F1 18 0E       	jr skipAddHund
0783   43F3             addOneToHund
0784   43F3 3E 00       	ld a, 0
0785   43F5 32 FB 49    	ld (score_mem_tens), a
0786   43F8 3A FC 49        ld a, (score_mem_hund)
0787   43FB C6 01       	add a, 1
0788   43FD 27          	daa                                   ; z80 daa instruction realigns for BCD after add or subtract
0789   43FE 32 FC 49    	ld (score_mem_hund), a
0790   4401             skipAddHund	
0791   4401             
0792   4401 C9              ret    
0793   4402                 
0794   4402                 
0795   4402             
0796   4402                   
0797   4402             ; this prints at to any offset (stored in bc) from the top of the screen Display, using string in de
0798   4402             printstring
0799   4402 D5              push de ; preserve de
0800   4403 21 6A 44        ld hl,Display
0801   4406 09              add hl,bc	
0802   4407             printstring_loop
0803   4407 1A              ld a,(de)
0804   4408 FE FF           cp $ff
0805   440A CA 12 44        jp z,printstring_end
0806   440D 77              ld (hl),a
0807   440E 23              inc hl
0808   440F 13              inc de
0809   4410 18 F5           jr printstring_loop
0810   4412             printstring_end	
0811   4412 D1              pop de  ; preserve de
0812   4413 C9              ret  
0813   4414                 
0814   4414             print_number16bits    ; bc stores the 16bits, print b then c, de stores offset from Display
0815   4414 78              ld a, b
0816   4415 CD 1F 44        call print_number8bits
0817   4418 79              ld a, c
0818   4419 13              inc de  ; move de over by 2
0819   441A 13              inc de
0820   441B CD 1F 44        call print_number8bits
0821   441E C9              ret
0822   441F             
0823   441F                 
0824   441F             print_number8bits
0825   441F 2A 0E 40        ld hl, (DF_CC)    
0826   4422 19              add hl, de    
0827   4423 F5              push af ;store the original value of a for later
0828   4424 E6 F0           and $f0 ; isolate the first digit
0829   4426 1F              rra
0830   4427 1F              rra
0831   4428 1F              rra
0832   4429 1F              rra
0833   442A C6 1C           add a,$1c ; add 28 to the character code
0834   442C 77              ld (hl), a
0835   442D 23              inc hl
0836   442E F1              pop af ; retrieve original value of a
0837   442F E6 0F           and $0f ; isolate the second digit
0838   4431 C6 1C           add a,$1c ; add 28 to the character code
0839   4433 77              ld (hl), a  
0840   4434                 
0841   4434 C9              ret
0842   4435             
0843   4435             printNumber
0844   4435 21 6A 44        ld hl,Display
0845   4438 09              add hl,bc	
0846   4439             printNumber_loop
0847   4439 1A              ld a,(de)
0848   443A F5              push af ;store the original value of a for later
0849   443B E6 F0           and $f0 ; isolate the first digit
0850   443D 1F              rra
0851   443E 1F              rra
0852   443F 1F              rra
0853   4440 1F              rra
0854   4441 C6 1C           add a,$1c ; add 28 to the character code
0855   4443 77              ld (hl), a
0856   4444 23              inc hl
0857   4445 F1              pop af ; retrieve original value of a
0858   4446 E6 0F           and $0f ; isolate the second digit
0859   4448 C6 1C           add a,$1c ; add 28 to the character code
0860   444A 77              ld (hl), a      
0861   444B C9              ret  
0862   444C                 
0863   444C             
0864   444C             ;check if TV synchro (FRAMES) happend
0865   444C             vsync	
0866   444C 3A 34 40    	ld a,(FRAMES)
0867   444F 4F          	ld c,a
0868   4450             sync
0869   4450 3A 34 40    	ld a,(FRAMES)
0870   4453 B9          	cp c
0871   4454 28 FA       	jr z,sync   
0872   4456             endOfVsync        
0873   4456 C9          	ret
0874   4457             
0875   4457                 
0876   4457 76                          DEFB $76                        ; Newline        
0877   4458             Line1End
0878   4458 00 14       Line2			DEFB $00,$14
0879   445A 0E 00                       DEFW Line2End-Line2Text
0880   445C F9 D4       Line2Text     	DEFB $F9,$D4                    ; RAND USR
0881   445E 1D 22 21 1D 				DEFB $1D,$22,$21,$1D,$20        ; 16514                
0881   4462 20 
0882   4463 7E                          DEFB $7E                        ; Number
0883   4464 8F 01 04 00                 DEFB $8F,$01,$04,$00,$00        ; Numeric encoding
0883   4468 00 
0884   4469 76                          DEFB $76                        ; Newline
0885   446A             Line2End            
0886   446A             endBasic
0887   446A                                                                             
0888   446A 76          Display        	DEFB $76                                                 				
0889   446B 00 00 00 00                 DEFB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,$76                     
0889   446F 00 00 00 00 
0889   4473 00 00 00 00 
0889   4477 00 00 00 00 
0889   447B 00 00 00 00 
0889   447F 00 00 00 00 
0889   4483 00 00 00 00 
0889   4487 00 00 00 00 
0889   448B 76 
0890   448C 00 00 00 00                 DEFB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,$76           
0890   4490 00 00 00 00 
0890   4494 00 00 00 00 
0890   4498 00 00 00 00 
0890   449C 00 00 00 00 
0890   44A0 00 00 00 00 
0890   44A4 00 00 00 00 
0890   44A8 00 00 00 00 
0890   44AC 76 
0891   44AD 00 00 00 00                 DEFB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,$76           
0891   44B1 00 00 00 00 
0891   44B5 00 00 00 00 
0891   44B9 00 00 00 00 
0891   44BD 00 00 00 00 
0891   44C1 00 00 00 00 
0891   44C5 00 00 00 00 
0891   44C9 00 00 00 00 
0891   44CD 76 
0892   44CE 00 00 00 00                 DEFB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,$76           
0892   44D2 00 00 00 00 
0892   44D6 00 00 00 00 
0892   44DA 00 00 00 00 
0892   44DE 00 00 00 00 
0892   44E2 00 00 00 00 
0892   44E6 00 00 00 00 
0892   44EA 00 00 00 00 
0892   44EE 76 
0893   44EF 00 00 00 00                 DEFB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,$76           
0893   44F3 00 00 00 00 
0893   44F7 00 00 00 00 
0893   44FB 00 00 00 00 
0893   44FF 00 00 00 00 
0893   4503 00 00 00 00 
0893   4507 00 00 00 00 
0893   450B 00 00 00 00 
0893   450F 76 
0894   4510 00 00 00 00                 DEFB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,$76           
0894   4514 00 00 00 00 
0894   4518 00 00 00 00 
0894   451C 00 00 00 00 
0894   4520 00 00 00 00 
0894   4524 00 00 00 00 
0894   4528 00 00 00 00 
0894   452C 00 00 00 00 
0894   4530 76 
0895   4531 00 00 00 00                 DEFB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,$76           
0895   4535 00 00 00 00 
0895   4539 00 00 00 00 
0895   453D 00 00 00 00 
0895   4541 00 00 00 00 
0895   4545 00 00 00 00 
0895   4549 00 00 00 00 
0895   454D 00 00 00 00 
0895   4551 76 
0896   4552 00 00 00 00                 DEFB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,$76           
0896   4556 00 00 00 00 
0896   455A 00 00 00 00 
0896   455E 00 00 00 00 
0896   4562 00 00 00 00 
0896   4566 00 00 00 00 
0896   456A 00 00 00 00 
0896   456E 00 00 00 00 
0896   4572 76 
0897   4573 00 00 00 00                 DEFB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,$76           
0897   4577 00 00 00 00 
0897   457B 00 00 00 00 
0897   457F 00 00 00 00 
0897   4583 00 00 00 00 
0897   4587 00 00 00 00 
0897   458B 00 00 00 00 
0897   458F 00 00 00 00 
0897   4593 76 
0898   4594 00 00 00 00                 DEFB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,$76           
0898   4598 00 00 00 00 
0898   459C 00 00 00 00 
0898   45A0 00 00 00 00 
0898   45A4 00 00 00 00 
0898   45A8 00 00 00 00 
0898   45AC 00 00 00 00 
0898   45B0 00 00 00 00 
0898   45B4 76 
0899   45B5 00 00 00 00                 DEFB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,$76           
0899   45B9 00 00 00 00 
0899   45BD 00 00 00 00 
0899   45C1 00 00 00 00 
0899   45C5 00 00 00 00 
0899   45C9 00 00 00 00 
0899   45CD 00 00 00 00 
0899   45D1 00 00 00 00 
0899   45D5 76 
0900   45D6 00 00 00 00                 DEFB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,$76           
0900   45DA 00 00 00 00 
0900   45DE 00 00 00 00 
0900   45E2 00 00 00 00 
0900   45E6 00 00 00 00 
0900   45EA 00 00 00 00 
0900   45EE 00 00 00 00 
0900   45F2 00 00 00 00 
0900   45F6 76 
0901   45F7 00 00 00 00                 DEFB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,$76           
0901   45FB 00 00 00 00 
0901   45FF 00 00 00 00 
0901   4603 00 00 00 00 
0901   4607 00 00 00 00 
0901   460B 00 00 00 00 
0901   460F 00 00 00 00 
0901   4613 00 00 00 00 
0901   4617 76 
0902   4618 00 00 00 00                 DEFB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,$76           
0902   461C 00 00 00 00 
0902   4620 00 00 00 00 
0902   4624 00 00 00 00 
0902   4628 00 00 00 00 
0902   462C 00 00 00 00 
0902   4630 00 00 00 00 
0902   4634 00 00 00 00 
0902   4638 76 
0903   4639 00 00 00 00                 DEFB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,$76           
0903   463D 00 00 00 00 
0903   4641 00 00 00 00 
0903   4645 00 00 00 00 
0903   4649 00 00 00 00 
0903   464D 00 00 00 00 
0903   4651 00 00 00 00 
0903   4655 00 00 00 00 
0903   4659 76 
0904   465A 00 00 00 00                 DEFB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,$76           
0904   465E 00 00 00 00 
0904   4662 00 00 00 00 
0904   4666 00 00 00 00 
0904   466A 00 00 00 00 
0904   466E 00 00 00 00 
0904   4672 00 00 00 00 
0904   4676 00 00 00 00 
0904   467A 76 
0905   467B 00 00 00 00                 DEFB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,$76           
0905   467F 00 00 00 00 
0905   4683 00 00 00 00 
0905   4687 00 00 00 00 
0905   468B 00 00 00 00 
0905   468F 00 00 00 00 
0905   4693 00 00 00 00 
0905   4697 00 00 00 00 
0905   469B 76 
0906   469C 00 00 00 00                 DEFB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,$76           
0906   46A0 00 00 00 00 
0906   46A4 00 00 00 00 
0906   46A8 00 00 00 00 
0906   46AC 00 00 00 00 
0906   46B0 00 00 00 00 
0906   46B4 00 00 00 00 
0906   46B8 00 00 00 00 
0906   46BC 76 
0907   46BD 00 00 00 00                 DEFB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,$76           
0907   46C1 00 00 00 00 
0907   46C5 00 00 00 00 
0907   46C9 00 00 00 00 
0907   46CD 00 00 00 00 
0907   46D1 00 00 00 00 
0907   46D5 00 00 00 00 
0907   46D9 00 00 00 00 
0907   46DD 76 
0908   46DE 00 00 00 00                 DEFB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,$76           
0908   46E2 00 00 00 00 
0908   46E6 00 00 00 00 
0908   46EA 00 00 00 00 
0908   46EE 00 00 00 00 
0908   46F2 00 00 00 00 
0908   46F6 00 00 00 00 
0908   46FA 00 00 00 00 
0908   46FE 76 
0909   46FF 00 00 00 00                 DEFB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,$76           
0909   4703 00 00 00 00 
0909   4707 00 00 00 00 
0909   470B 00 00 00 00 
0909   470F 00 00 00 00 
0909   4713 00 00 00 00 
0909   4717 00 00 00 00 
0909   471B 00 00 00 00 
0909   471F 76 
0910   4720 00 00 00 00                 DEFB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,$76           
0910   4724 00 00 00 00 
0910   4728 00 00 00 00 
0910   472C 00 00 00 00 
0910   4730 00 00 00 00 
0910   4734 00 00 00 00 
0910   4738 00 00 00 00 
0910   473C 00 00 00 00 
0910   4740 76 
0911   4741 00 00 00 00                 DEFB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,$76           
0911   4745 00 00 00 00 
0911   4749 00 00 00 00 
0911   474D 00 00 00 00 
0911   4751 00 00 00 00 
0911   4755 00 00 00 00 
0911   4759 00 00 00 00 
0911   475D 00 00 00 00 
0911   4761 76 
0912   4762 00 00 00 00                 DEFB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,$76           
0912   4766 00 00 00 00 
0912   476A 00 00 00 00 
0912   476E 00 00 00 00 
0912   4772 00 00 00 00 
0912   4776 00 00 00 00 
0912   477A 00 00 00 00 
0912   477E 00 00 00 00 
0912   4782 76 
0913   4783             
0914   4783             Variables: 
0915   4783             
0916   4783             playerSpriteData
0917   4783                  ; DEFB   $00, $00, $00, $85, $05, $00, $00, $00, $00, $00, $00, $81, commented out but nice space fighhter ship
0918   4783                  ; DEFB	$82, $00, $00, $00, $00, $00, $00, $05, $85, $00, $00, $00,
0919   4783                  ; DEFB	$00, $00, $85, $80, $80, $05, $00, $00, $05, $87, $80, $80,
0920   4783                  ; DEFB	$80, $80, $04, $85, $82, $80, $80, $82, $81, $80, $80, $81,
0921   4783                  ; DEFB	$07, $03, $84, $82, $81, $07, $03, $84, $00, $00, $00, $84,
0922   4783                  ; DEFB	$07, $00, $00, $00     
0923   4783                 ; the next one is the old 8x8 big sail ship
0924   4783                 ; DEFB	$00, $00, $00, $00, $81, $04, $00, $00, $00, $00, $00, $06,
0925   4783                 ; DEFB	$85, $00, $00, $00, $00, $00, $06, $87, $80, $82, $00, $00,
0926   4783                 ; DEFB	$00, $06, $87, $80, $80, $80, $82, $00, $06, $00, $03, $03,
0927   4783                 ; DEFB	$84, $00, $87, $83, $03, $82, $07, $03, $03, $03, $84, $80,
0928   4783                 ; DEFB	$00, $02, $04, $01, $01, $01, $86, $01, $00, $00, $02, $80,
0929   4783                 ; DEFB	$80, $80, $01, $00   
0930   4783                 ; this is now 8 by 4
0931   4783 00 00 81 00      DEFB $00, $00, $81, $00, $00, $81, $04, $00, $00, $06, $85, $00,
0931   4787 00 81 04 00 
0931   478B 00 06 85 00 
0932   478F 00 85 00 00      DEFB $00, $85, $00, $00, $81, $83, $81, $83, $82, $81, $81, $80,
0932   4793 81 83 81 83 
0932   4797 82 81 81 80 
0933   479B 00 02 81 81      DEFB $00, $02, $81, $81, $81, $81, $82, $01, $00, $00, $00, $00,
0933   479F 81 81 82 01 
0933   47A3 00 00 00 00 
0934   47A7 00 00 00 00      DEFB $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
0934   47AB 00 00 00 00 
0934   47AF 00 00 00 00 
0935   47B3 00 00 00 00      DEFB $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
0935   47B7 00 00 00 00 
0935   47BB 00 00 00 00 
0936   47BF 00 00 00 00 	 DEFB $00, $00, $00, $00
0937   47C3                 
0938   47C3             missileData     
0939   47C3                  ;DEFB	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
0940   47C3                  ;DEFB	$00, $00, $00, $00, $00, $00, $00, $87, $04, $00, $00, $00,
0941   47C3                  ;DEFB	$00, $00, $00, $02, $01, $00, $00, $00, $00, $00, $00, $00,
0942   47C3                  ;DEFB	$00, $00, $00, $00, $00, $00, $00, $85, $05, $00, $00, $00,
0943   47C3                  ;DEFB	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
0944   47C3                  ;DEFB	$00, $00, $00, $00     
0945   47C3 00 87 04 00 	DEFB $00, $87, $04, $00, $00, $02, $01, $00, $00, $00, $00, $00,
0945   47C7 00 02 01 00 
0945   47CB 00 00 00 00 
0946   47CF 00 85 05 00 	DEFB $00, $85, $05, $00, $00, $00, $00, $00, $00, $00, $00, $00,
0946   47D3 00 00 00 00 
0946   47D7 00 00 00 00 
0947   47DB 00 00 00 00 	DEFB $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
0947   47DF 00 00 00 00 
0947   47E3 00 00 00 00 
0948   47E7 00 00 00 00 	DEFB $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00     
0948   47EB 00 00 00 00 
0948   47EF 00 00 00 00 
0949   47F3                  
0950   47F3             explsion4x4     
0951   47F3 00 86 00 06 	DEFB $00, $86, $00, $06, $04, $87, $04, $00, $00, $02, $86, $00,
0951   47F7 04 87 04 00 
0951   47FB 00 02 86 00 
0952   47FF 87 01 00 01 	DEFB $87, $01, $00, $01, $00, $00, $00, $00, $00, $00, $00, $00,
0952   4803 00 00 00 00 
0952   4807 00 00 00 00 
0953   480B 00 00 00 00 	DEFB $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
0953   480F 00 00 00 00 
0953   4813 00 00 00 00 
0954   4817 00 00 00 00 	DEFB $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00     
0954   481B 00 00 00 00 
0954   481F 00 00 00 00 
0955   4823             jollyRoger     
0956   4823 87 03 00 00      DEFB	$87, $03, $00, $00, $00, $00, $03, $04, $05, $86, $00, $83,
0956   4827 00 00 03 04 
0956   482B 05 86 00 83 
0957   482F 83 00 06 85      DEFB	$83, $00, $06, $85, $00, $00, $06, $04, $87, $86, $00, $00,
0957   4833 00 00 06 04 
0957   4837 87 86 00 00 
0958   483B 00 00 05 87      DEFB	$00, $00, $05, $87, $04, $85, $00, $00, $00, $00, $02, $83,
0958   483F 04 85 00 00 
0958   4843 00 00 02 83 
0959   4847 83 01 00 00      DEFB	$83, $01, $00, $00, $00, $00, $04, $07, $84, $87, $00, $00,
0959   484B 00 00 04 07 
0959   484F 84 87 00 00 
0960   4853 05 06 00 01      DEFB	$05, $06, $00, $01, $02, $00, $86, $85, $02, $83, $00, $00,
0960   4857 02 00 86 85 
0960   485B 02 83 00 00 
0961   485F 00 00 83 01      DEFB	$00, $00, $83, $01     
0962   4863             
0963   4863             pirate3sprites     ;; these are 4 by 8 bytes and is 3 in the animation = 96bytes
0964   4863 00 84 07 85     DEFB $00, $84, $07, $85, $87, $81, $82, $06, $05, $80, $80, $00,
0964   4867 87 81 82 06 
0964   486B 05 80 80 00 
0965   486F 01 07 84 00     DEFB $01, $07, $84, $00, $87, $05, $85, $00, $00, $00, $02, $00,
0965   4873 87 05 85 00 
0965   4877 00 00 02 00 
0966   487B 00 00 00 00     DEFB $00, $00, $00, $00, $00, $00, $00, $00, $00, $84, $07, $00,
0966   487F 00 00 00 00 
0966   4883 00 84 07 00 
0967   4887 87 81 82 04     DEFB $87, $81, $82, $04, $05, $80, $80, $85, $01, $07, $84, $02,
0967   488B 05 80 80 85 
0967   488F 01 07 84 02 
0968   4893 00 05 85 00     DEFB $00, $05, $85, $00, $02, $01, $02, $00, $00, $00, $00, $00,
0968   4897 02 01 02 00 
0968   489B 00 00 00 00 
0969   489F 00 00 00 00     DEFB $00, $00, $00, $00, $05, $84, $07, $00, $86, $81, $82, $04,
0969   48A3 05 84 07 00 
0969   48A7 86 81 82 04 
0970   48AB 00 80 80 85 	DEFB $00, $80, $80, $85, $00, $07, $84, $02, $00, $05, $85, $00,
0970   48AF 00 07 84 02 
0970   48B3 00 05 85 00 
0971   48B7 02 01 02 00 	DEFB $02, $01, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
0971   48BB 00 00 00 00 
0971   48BF 00 00 00 00 
0972   48C3             pirate3sprites4x4       ; these are 16 bytes each 4 by 4)
0973   48C3 05 85 05 00 	DEFB $05, $85, $05, $00, $02, $80, $80, $86, $00, $07, $84, $02,
0973   48C7 02 80 80 86 
0973   48CB 00 07 84 02 
0974   48CF 87 05 85 00 	DEFB $87, $05, $85, $00, $04, $85, $05, $00, $02, $80, $80, $84,
0974   48D3 04 85 05 00 
0974   48D7 02 80 80 84 
0975   48DB 00 07 84 00 	DEFB $00, $07, $84, $00, $02, $01, $85, $00, $00, $85, $05, $87,
0975   48DF 02 01 85 00 
0975   48E3 00 85 05 87 
0976   48E7 06 80 80 01 	DEFB $06, $80, $80, $01, $01, $07, $84, $00, $87, $05, $85, $00
0976   48EB 01 07 84 00 
0976   48EF 87 05 85 00 
0977   48F3                 
0978   48F3             ; used to clear current location before move    
0979   48F3             blankSprite
0980   48F3 00 00 00 00     DEFB   0,  0,  0,  0,  0,  0,  0,  0
0980   48F7 00 00 00 00 
0981   48FB 00 00 00 00     DEFB   0,  0,  0,  0,  0,  0,  0,  0
0981   48FF 00 00 00 00 
0982   4903 00 00 00 00     DEFB   0,  0,  0,  0,  0,  0,  0,  0
0982   4907 00 00 00 00 
0983   490B 00 00 00 00     DEFB   0,  0,  0,  0,  0,  0,  0,  0
0983   490F 00 00 00 00 
0984   4913 00 00 00 00     DEFB   0,  0,  0,  0,  0,  0,  0,  0
0984   4917 00 00 00 00 
0985   491B 00 00 00 00     DEFB   0,  0,  0,  0,  0,  0,  0,  0
0985   491F 00 00 00 00 
0986   4923 00 00 00 00     DEFB   0,  0,  0,  0,  0,  0,  0,  0
0986   4927 00 00 00 00 
0987   492B 00 00 00 00     DEFB   0,  0,  0,  0,  0,  0,  0,  0    
0987   492F 00 00 00 00 
0988   4933 00 00 00 00     DEFB   0,  0,  0,  0,  0,  0,  0,  0
0988   4937 00 00 00 00 
0989   493B 00 00 00 00     DEFB   0,  0,  0,  0,  0,  0,  0,  0      
0989   493F 00 00 00 00 
0990   4943 08 08 00 00     DEFB   8,  8,  0,  0,  0,  0,  0,  0      
0990   4947 00 00 00 00 
0991   494B             blockFilled    ;8*10
0992   494B 08 08 08 08     DEFB   8,  8,  8,  8,  8,  8,  8,  8
0992   494F 08 08 08 08 
0993   4953 08 08 08 08     DEFB   8,  8,  8,  8,  8,  8,  8,  8
0993   4957 08 08 08 08 
0994   495B 08 08 08 08     DEFB   8,  8,  8,  8,  8,  8,  8,  8
0994   495F 08 08 08 08 
0995   4963 08 08 08 08     DEFB   8,  8,  8,  8,  8,  8,  8,  8
0995   4967 08 08 08 08 
0996   496B 08 08 08 08     DEFB   8,  8,  8,  8,  8,  8,  8,  8
0996   496F 08 08 08 08 
0997   4973 08 08 08 08     DEFB   8,  8,  8,  8,  8,  8,  8,  8
0997   4977 08 08 08 08 
0998   497B 08 08 08 08     DEFB   8,  8,  8,  8,  8,  8,  8,  8
0998   497F 08 08 08 08 
0999   4983 08 08 08 08     DEFB   8,  8,  8,  8,  8,  8,  8,  8
0999   4987 08 08 08 08 
1000   498B 08 08 08 08     DEFB   8,  8,  8,  8,  8,  8,  8,  8     
1000   498F 08 08 08 08 
1001   4993 08 08 08 08     DEFB   8,  8,  8,  8,  8,  8,  8,  8    
1001   4997 08 08 08 08 
1002   499B             
1003   499B             pirateValidBitMap ;we've fixed on 4x2 grid of pirates so thats 8 bits to store if they are dead or not
1004   499B 00              DEFB 0
1005   499C             playerXPos
1006   499C 00              DEFB 0
1007   499D             evenOddLoopFlag
1008   499D 00              DEFB 0
1009   499E             evenOddLoopCount    
1010   499E 00              DEFB 0
1011   499F             enemySpriteZeroPos_ST  
1012   499F 00 00           DEFW 0
1013   49A1             enemySpriteOnePos_ST    
1014   49A1 00 00           DEFW 0
1015   49A3             enemySpriteZeroPos_END
1016   49A3 00 00           DEFW 0
1017   49A5             enemySpriteOnePos_END   
1018   49A5 00 00           DEFW 0
1019   49A7             enemySpriteZeroPos_DIR
1020   49A7 00 00           DEFW 0
1021   49A9             enemySpriteOnePos_DIR  
1022   49A9 00 00           DEFW 0
1023   49AB             enemySpriteZeroPos_CUR
1024   49AB 00 00           DEFW 0
1025   49AD             enemySpriteOnePos_CUR
1026   49AD 00 00           DEFW 0
1027   49AF             enemySpriteZeroPos_RATE
1028   49AF 00              DEFB 0
1029   49B0             enemySpriteOnePos_RATE
1030   49B0 00              DEFB 0    
1031   49B1             TEMP_enemySpritePointer
1032   49B1 00 00           DEFW 0
1033   49B3             TEMP_enemySpritePos_CUR
1034   49B3 00 00           DEFW 0
1035   49B5             enemySpriteZero_HorizVert
1036   49B5 00              DEFB 0
1037   49B6             enemySpriteOne_HorizVert    
1038   49B6 00              DEFB 0
1039   49B7             TEMP_enemySpriteFrame
1040   49B7 00              DEFB 0
1041   49B8             enemySpriteFrameZero
1042   49B8 00              DEFB 0
1043   49B9             enemySpriteFrameOne    
1044   49B9 00              DEFB 0
1045   49BA             enemySprites   ;; keeping these to 4*4 for speed and size
1046   49BA             enemySprite4by4BlankPointer
1047   49BA 00 00           DEFW 0
1048   49BC             YSpeed   
1049   49BC 00              DEFB 0
1050   49BD             currentPlayerLocation 
1051   49BD 00 00           DEFW 0
1052   49BF             MissileInFlightFlag
1053   49BF 00              DEFB 0
1054   49C0             missileCountDown
1055   49C0 00              DEFB 0
1056   49C1             currentMissilePosition    
1057   49C1 00 00           DEFW 0
1058   49C3             enemySprite5by8Blank
1059   49C3 00 00 00 00     DEFB 0, 0, 0 ,0, 0
1059   49C7 00 
1060   49C8 00 00 00 00     DEFB 0, 0, 0 ,0, 0
1060   49CC 00 
1061   49CD 00 00 00 00     DEFB 0, 0, 0 ,0, 0
1061   49D1 00 
1062   49D2 00 00 00 00     DEFB 0, 0, 0 ,0, 0
1062   49D6 00 
1063   49D7 00 00 00 00     DEFB 0, 0, 0 ,0, 0 
1063   49DB 00 
1064   49DC 00 00 00 00     DEFB 0, 0, 0 ,0, 0
1064   49E0 00 
1065   49E1 00 00 00 00     DEFB 0, 0, 0 ,0, 0
1065   49E5 00 
1066   49E6 00 00 00 00     DEFB 0, 0, 0 ,0, 0     
1066   49EA 00 
1067   49EB             deadPlayerSpritePointer
1068   49EB 00 00           DEFW 0
1069   49ED             playerSpritePointer
1070   49ED 00 00           DEFW 0 
1071   49EF             pirateTopLeftPosition
1072   49EF 00 00           DEFW 0 
1073   49F1             pirateRowLeftPositionTemp
1074   49F1 00 00           DEFW 0     
1075   49F3             pirateValidBitMapMaskTemp
1076   49F3 00              DEFB 0
1077   49F4             pirateSpriteCycleCount    
1078   49F4 00              DEFB 0
1079   49F5             pirateSpritesPointer
1080   49F5 00 00           DEFW 0
1081   49F7             pirateDirUpdate
1082   49F7 01 00           DEFW 1
1083   49F9             pirateXPos
1084   49F9 00              DEFB 0    
1085   49FA             playerLives
1086   49FA 00              DEFB 0    
1087   49FB             score_mem_tens
1088   49FB 00              DEFB 0
1089   49FC             score_mem_hund
1090   49FC 00              DEFB 0
1091   49FD             last_score_mem_tens
1092   49FD 00              DEFB 0
1093   49FE             last_score_mem_hund
1094   49FE 00              DEFB 0       
1095   49FF             jollyRogerDirUpdate
1096   49FF 01 00           DEFW 1
1097   4A01             jollyRogerXPos
1098   4A01 00              DEFB 0
1099   4A02             jollyRogerLocation
1100   4A02 00 00           DEFW 0
1101   4A04             previousJollyRogerLocation    
1102   4A04 00 00           DEFW 0
1103   4A06             gameOverRestartFlag    
1104   4A06 00              DEFB 0    
1105   4A07             LivesText
1106   4A07 31 2E 3B 2A     DEFB _L,_I,_V,_E,_S,_EQ,$ff    
1106   4A0B 38 14 FF 
1107   4A0E             TopLineText
1108   4A0E 38 28 34 37     DEFB _S,_C,_O,_R,_E,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,_L,_I,_V,_E,_S,__,__,__,__,$ff
1108   4A12 2A 00 00 00 
1108   4A16 00 00 00 00 
1108   4A1A 00 00 00 00 
1108   4A1E 00 00 00 00 
1108   4A22 00 00 31 2E 
1108   4A26 3B 2A 38 00 
1108   4A2A 00 00 00 FF 
1109   4A2E             
1110   4A2E             title_screen_txt
1111   4A2E 3F 3D 24 1D 	DEFB	_Z,_X,_8,_1,__,_P,_I,_R,_A,_T,_E,__,_I,_N,_V,_A,_D,_E,_R,_S,$ff
1111   4A32 00 35 2E 37 
1111   4A36 26 39 2A 00 
1111   4A3A 2E 33 3B 26 
1111   4A3E 29 2A 37 38 
1111   4A42 FF 
1112   4A43             keys_screen_txt_1
1113   4A43 38 00 39 34 	DEFB	_S,__,_T,_O,__,_S,_T,_A,_R,_T,26,__,_O,__,_L,_E,_F,_T,26,__,_P,__,_R,_I,_G,_H,_T,$ff
1113   4A47 00 38 39 26 
1113   4A4B 37 39 1A 00 
1113   4A4F 34 00 31 2A 
1113   4A53 2B 39 1A 00 
1113   4A57 35 00 37 2E 
1113   4A5B 2C 2D 39 FF 
1114   4A5F             keys_screen_txt_2
1115   4A5F 00 00 00 00 	DEFB	__,__,__,__,__,__,__,_Z,__,_O,_R,__,_S,_P,_A,_C,_E,__,_EQ,__,_F,_I,_R,_E,,$ff    
1115   4A63 00 00 00 3F 
1115   4A67 00 34 37 00 
1115   4A6B 38 35 26 28 
1115   4A6F 2A 00 14 00 
1115   4A73 2B 2E 37 2A 
1115   4A77 00 FF 
1116   4A79             
1117   4A79             game_objective_txt
1118   4A79 39 34 00 3C 	DEFB	_T,_O,__,_W,_I,_N,__,_S,_U,_R,_V,_I,_V,_E,__, _A,_L,_L,__,_A,_L,_I,_E,_N,_S,$ff
1118   4A7D 2E 33 00 38 
1118   4A81 3A 37 3B 2E 
1118   4A85 3B 2A 00 26 
1118   4A89 31 31 00 26 
1118   4A8D 31 2E 2A 33 
1118   4A91 38 FF 
1119   4A93             	
1120   4A93             last_Score_txt
1121   4A93 15 15 15 15 	DEFB 21,21,21,21,_L,_A,_S,_T,__,__,_S,_C,_O,_R,_E,21,21,21,21,$ff	
1121   4A97 31 26 38 39 
1121   4A9B 00 00 38 28 
1121   4A9F 34 37 2A 15 
1121   4AA3 15 15 15 FF 
1122   4AA7             high_Score_txt
1123   4AA7 15 15 15 15 	DEFB 21,21,21,21,_H,_I,_G,_H,__,__,_S,_C,_O,_R,_E,21,21,21,21,$ff		
1123   4AAB 2D 2E 2C 2D 
1123   4AAF 00 00 38 28 
1123   4AB3 34 37 2A 15 
1123   4AB7 15 15 15 FF 
1124   4ABB             credits_and_version_1
1125   4ABB 00 27 3E 00 	DEFB __,_B,_Y,__,_A,__,_P,_I,_L,_K,_I,_N,_G,_T,_O,_N,__, _2,_0,_2,_4,$ff
1125   4ABF 26 00 35 2E 
1125   4AC3 31 30 2E 33 
1125   4AC7 2C 39 34 33 
1125   4ACB 00 1E 1C 1E 
1125   4ACF 20 FF 
1126   4AD1             credits_and_version_2
1127   4AD1 00 00 3B 2A 	DEFB __,__,_V,_E,_R,_S,_I,_O,_N,__,_V,_0,_DT,_0,_DT,_1,$ff    
1127   4AD5 37 38 2E 34 
1127   4AD9 33 00 3B 1C 
1127   4ADD 1B 1C 1B 1D 
1127   4AE1 FF 
1128   4AE2             credits_and_version_3
1129   4AE2 00 00 00 3E 	DEFB __,__,__,_Y,_O,_U,_T,_U,_B,_E,_CL, _B,_Y,_T,_E,_F,_O,_R,_E,_V,_E,_R,$ff       
1129   4AE6 34 3A 39 3A 
1129   4AEA 27 2A 0E 27 
1129   4AEE 3E 39 2A 2B 
1129   4AF2 34 37 2A 3B 
1129   4AF6 2A 37 FF 
1130   4AF9                 
1131   4AF9                
1132   4AF9 80          VariablesEnd:   DEFB $80
1133   4AFA             BasicEnd: 
1134   4AFA             #END
1135   4AFA             
tasm: Number of errors = 0
